#!/usr/bin/python
from datetime import datetime
import subprocess, os, time, requests, json
from pathlib import Path
from dotenv import load_dotenv

# .env reader
env_file = '.env'
env_path = Path('/Users/fastory/dashboardPython') / env_file
load_dotenv(dotenv_path=env_path)

print(env_path)
# Colors
light_green = "\033[92m"
yellow = "\033[33m"
bold = "\033[1m"
blue = '\033[34m'
red = '\033[31m'
eoc = "\033[0m"

# OpenWeatherMap
open_weather_map_api_key = os.getenv('OPEN_WEATHER_MAP_API_KEY')
open_weather_map_version = os.getenv('OPEN_WEATHER_MAP_VERSION') or '2.5'
city_name = os.getenv('OPEN_WEATHER_MAP_CITY') or 'Montreuil'
country_code = os.getenv('OPEN_WEATHER_MAP_COUNTRY_CODE') or 'fr'
base_url = "http://api.openweathermap.org/data/" + open_weather_map_version + "/weather?"
location = city_name + "," + country_code
units = "metric"
complete_url = base_url + "appid=" + open_weather_map_api_key + "&q=" + location + "&units=" + units

# Github
github_user = os.getenv('GITHUB_USERNAME')
github_token = os.getenv('GITHUB_TOKEN')

def get_terminal_width_height():
  size = subprocess.check_output(['stty', 'size']).split()
  width = int(size[1])
  height = int(size[0])
  return width, height

def get_weather():
  res = requests.get(complete_url).json()
  if res['cod'] == 200:
    main = res['main']
    weather = res['weather'][0]
    temp = str(main['temp']) + 'ÂºC'
    temp_max = main['temp_max']
    temp_min = main['temp_min']
    max_min = str(temp_max) + ' / ' + str(temp_min)
    description = weather['description']
    location_name = 'Weather at ' + bold + city_name + eoc
    return temp, max_min, description, location_name
  elif res['cod'] == '404':
    print('City not found');
    exit()
  else:
    print('An error occured')
    exit()

def get_github_data():
  github_res = requests.get('https://api.github.com/notifications', auth=(github_user, github_token))
  github = github_res.json()
  return github

def get_datetime():
  now = datetime.now()
  hour = now.strftime("%H:%M")
  date = now.strftime("%d %B %Y")
  return hour, date

def print_loop():
  os.system('clear')
  while True:
    print_dashboard()
    time.sleep(30)

def print_center(to_print, padding = 10):
  width, height = get_terminal_width_height()
  print(to_print.center(width + padding))

def print_date():
  hour, date = get_datetime()
  print(light_green + bold)
  print_center(hour)
  print(eoc + yellow)
  print_center(date)

def print_weather():
  temp, max_min, description, location_name = get_weather()
  print(blue)
  print_center(location_name, 16)
  print(blue)
  print_center(temp)
  print_center(max_min)
  print_center(description)

def print_padding():
  width, height = get_terminal_width_height()
  padding = int(height / 10)
  print('\n' * padding)

def print_github():
  github = get_github_data()
  review_requested = {}
  subscribed = {}
  author = {}

  for notification in github:
    id = notification['id']
    title = notification['subject']['title']
    to_update = { id: title }
    if notification['reason'] == 'review_requested':
        review_requested.update(to_update)
    if notification['reason'] == 'subscribed':
        subscribed.update(to_update)
    if notification['reason'] == 'author':
        author.update(to_update)
  print(red)
  print('Github notifications: ' + str(len(github)))
  print('- review_requested: ' + str(len(review_requested)))
  print('- Subscribed: ' + str(len(subscribed)))
  print('- author: ' + str(len(author)))


def print_dashboard():
  print_padding()
  print_date()
  print_weather()
  print_github()
  print_padding()
  print(eoc)
  
print_loop()
